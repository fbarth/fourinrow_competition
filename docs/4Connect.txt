Que algoritmo deve ser utilizado para desenvolver um agente jogador de Connect4 PopOut vencedor? Deve-se utilizar uma implementação de Min-Max com poda alpha-beta? Se sim, qual a profundidade que deverá ser utilizada para evitar processamentos superiores a 5 segundos por jogada? Qual a função de utilidade que deve ser utilizada? O algoritmo que deve ser utilizado para desenvolver um agente jogador de Connect4 PopOut vencedor é Min-Max normal, no entanto, a poda alpha-beta apresenta-se mais eficiente, de forma que ele identifica o caminho da árvore que não terá um bom resultado no final, realizando sua “poda”. Para, assim, ignorar esse caminho e escolher outro melhor para tomar a melhor decisão. Dessa forma, é possível afirmar que a poda alpha-beta apresenta mais benefícios para esse projeto, visto que ela reduz o número de nós gerados pela árvore. Assim, ao utilizar essa otimização, o processamento do algoritmo torna-se menor, sendo assim eficiente para o limite de tempo de 5 segundos determinado no enunciado do projeto.

O seu jogador faz uso de alguma base de conhecimento? Se sim, como ela é utilizada durante o processo de tomada de decisão? O jogador implementado faz uso de uma inteligência de verificação que observa diagonal, vertical e horizontal, observando se podem vir a existir 2, 3 ou 4 moedas no próximo estado do jogo e se a moeda está no limite inferior ou superior do ‘board’. E, assim, o jogador utiliza uma função que estabelece pesos sobre as possibilidades de movimentações, dando preferência ao domínio do centro do tabuleiro. E, baseado nas probabilidades calculadas, o algoritmo toma a decisão do próximo movimento. Além disso, o algoritmo do jogador observa situações de possíveis fins de jogo, tanto para si mesmo quanto para o oponente. Dessa forma, em casos que existam possibilidade de vitória para o oponente, o algoritmo desenvolvido, foca em bloquear essa possibilidade através de jogadas defensivas, ao passo que em casos em que existe a possibilidade de finalizar o jogo com vitória para o nosso agente, ele foca nessa possibilidade para ganhar o jogo.

Qual a sua expectativa com relação ao desempenho do seu agente? Você acredita que ele irá desempenhar bem na competição? Por que? Você executou testes contra outros jogadores? Qual foram os resultados? Acreditamos que o nosso agente tem uma boa capacidade tanto de defesa, quanto de ataque, pois ele analisa as situações de cada jogada e decide qual a melhor ação, de modo que defende uma possível jogada que arremata a partida (na diagonal, vertical e horizontal), mas também faz jogadas de ataque para conseguir posições que tem uma maior probabilidade de viória. O agente foi testado através de um script simples que roda 100 vezes contra o RandomPlayer. Dessas 100 vezes 50 o AIPlayer inicial e 50 o RandomPlayer inicia e em nenhuma das vezes o AIPlayer perdeu. Logo, concluímos que o agente irá performar bem na competição.

Quais foram as principais referências utilizadas para a implementação do seu jogador? Referências utilizadas: http://fbarth.net.br/introduction_ai/aulas/14_competicao/ http://fbarth.net.br/Connect4-Python/ http://fbarth.net.br/introduction_ai/aulas/13_jogos/ http://fbarth.net.br/introduction_ai/referencias/04_busca_competitiva/ https://towardsdatascience.com/creating-the-perfect-connect-four-ai-bot-c165115557b0

Existem diferenças significativas entre um jogador de Connect4 e um jogador de Connect4 PopOut em termos de árvore de busca e função de avaliação? É possível utilizar o jogador implementado para o Connect4 PopOut em competições de Connect4 sem muitas modificações? Os algoritmos de Connect4 e de Connect4 PopOut são bastante similares, visto que a única diferença entre eles é a possibilidade de se remover uma moeda da última linha. Dessa forma, a diferença seria verificar a última linha do jogo e prever o resultado da remoção da moeda na função de avaliação. Assim, gerando sucessores diferentes do Connect4 comum e alterando pesos em relação a escolha dos movimentos futuros. No entanto, os movimentos de remoção seriam menos recorrentes que os movimentos de inserção de moedas. Dessa forma, é possível afirmar que um jogador de Connect4 PopOut não precisa de uma grande quantidade de alterações no algoritmo para se adaptar a um jogo de Connect4 comum.
